#!/usr/bin/env python3

# TODO(python): remove python

import argparse
import os
import pathlib
import random

import jehon.media as jmedia
import jehon.fs as jfs
import jehon.objects as jobj

parser = argparse.ArgumentParser()
parser.add_argument('source', type=str, help='Where to look for pictures', nargs='+')
parser.add_argument('--dest', type=str, help='Where to store pictures', default='/tmp/pictures')
parser.add_argument('--amount', type=int, help='How much pictures to take', default=20)
parser.add_argument('--zero', type=int, help='What index to start from', default=0)
parser.add_argument('--max-width', type=int, default=1600)
parser.add_argument('--max-height', type=int, default=1200)
args = parser.parse_args()

# Current index
dest = args.dest
max_index = args.zero + args.amount
max_width = args.max_width
max_height = args.max_height

# Index of the next one... (dynamically changed)
index = args.zero

print("dest:       ", dest)
print("staring:    ", index)
print("max_items:  ", max_index - index)
print("max_width:  ", max_width)
print("max_height: ", max_height)

def need_more() -> bool:
    return index < max_index

def fn(n: int) -> str:
    return os.path.join(dest, f"{n:03}.jpg")

def add_picture(path) -> str:
    global index # pylint: disable=global-statement

    print(f"Adding #{index:03} {path}")

    img = jmedia.JHMetadataImage(path)
    img.resize_to_max(max_width, max_height)
    img.fix_orientation()
    img.add_text_centered([0.5, 0.87], img.title, font_size=0.04)
    img.add_text_centered([0.5, 0.92], str(img.timestamp), font_size=0.02)
    img.img.save(fn(index), quality=95)

    index += 1
    return path

def take_pictures(path) -> list[str]:
    res = []
    files = os.listdir(path)
    random.shuffle(files)
    for file in files:
        fpath = os.path.join(path, file)
        if not jfs.is_image(fpath):
            continue

        res.append(add_picture(fpath))

        if not need_more():
            break

    return res

def take_folder(path) -> list[str]:
    # print(f"- Entering {path}")

    res = []

    items = jfs.folders_with_properties(path, file_properties="kiosk.json")
    filtered_items = jobj.filter_dict(items, lambda val, key: val.get("excluded", False) if val else True)
    weightedItems = jobj.mutate_dict(filtered_items, lambda x: x.get("priority", 1) if x else 1.0)
    randomizedItems = jobj.randomize_weighted_list(weightedItems)

    while need_more():
        if not randomizedItems:
            break
        where = randomizedItems.pop()
        where_path = os.path.join(path, where)

        if where == '.':
            res += take_pictures(path)
        else:
            res += take_folder(where_path)

    return res

os.makedirs(dest, mode=0o777, exist_ok=True)

for source in args.source:
    print("Source: ", source)
    take_folder(source)

# Remove remaining files
for i in range(0, 10):
    pathlib.Path(fn(index + i)).unlink(missing_ok = True)

print("Done")
