#!/usr/bin/env bash

set -o errexit

# shellcheck source-path=SCRIPTDIR
. jh-lib

silent=""
if [ "$1" = "-s" ]; then
	silent="true"
fi

PAD_HEADER=25

ORIGIN="$(git remote get-url origin)"
GIT_SLUG="$ORIGIN"
GIT_SLUG="${GIT_SLUG##git@github.com:}"
GIT_SLUG="${GIT_SLUG%.git}"
GIT_OWNER="${GIT_SLUG/\/*/}"
GIT_PROJECT="${GIT_SLUG#*\/}"
GIT_BRANCH="$(git name-rev --name-only HEAD)"

m() {
	if [ -z "$silent" ]; then
		echo "$1 $(printf %-${PAD_HEADER}s "$2:") $3"
	fi
}

echo "Looking for"
m "-" "GIT_SLUG" "$GIT_SLUG"
m "-" "GIT_OWNER" "$GIT_OWNER"
m "-" "GIT_PROJECT" "$GIT_PROJECT"
m "-" "GIT_BRANCH" "$GIT_BRANCH"

export m
export PAD_HEADER
export GIT_SLUG
export GIT_OWNER
export GIT_PROJECT
export GIT_BRANCH

if [ -z "$(git status --porcelain)" ]; then
	GIT_STATUS=""
	m "$jhMsgOk" "GIT status" "clean"
else
	GIT_STATUS="dirty"
	m "$jhMsgKo" "GIT status" "dirty"
fi
export GIT_STATUS

# LOCAL COMMIT NOT PUSHED
GIT_AHEAD=$(git status -sb | grep -E '\[(ahead|behind)' | sed -r 's/^.*\[//g' | sed -r 's/\].*$//g') || true
if [ -z "$GIT_AHEAD" ]; then
	m "$jhMsgOk" "GIT origin" "up-to-date"
else
	m "$jhMsgKo" "GIT origin" "$GIT_AHEAD"
fi
export GIT_AHEAD

# STASH LIST
GIT_STASH_CNT=$(git stash list | wc -l)
if [[ $GIT_STASH_CNT -eq 0 ]]; then
	m "$jhMsgOk" "GIT Stash" "None"
else
	m "$jhMsgKo" "GIT Stash" "$GIT_STASH_CNT"
fi
export GIT_STASH_CNT
