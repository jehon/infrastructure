#!/usr/bin/env bash

set -o errexit

# shellcheck source-path=SCRIPTDIR
. jh-lib

cryptedSource="${jhCloudFolderInUserHome}/Workspaces/Jean/.encrypted_2025"
cryptedMounted="${HOME}/Private"
toBeEncrypted="${HOME}/to-be-encrypted"
newlyEncrypted="${cryptedMounted}/divers"
newlyEncryptedOther="${cryptedMounted}/divers-others"

mkdir -p "${toBeEncrypted}"
chmod "0700" "${toBeEncrypted}"

declare -a MOUNTED

check_mounted_folder() {
	DST="$1"

	if [ ! -r "${DST}"/.mounted ]; then
		echo "Folder ${DST} incorrectly mounted (exists)" >&2
		return 1
	fi

	if echo "13cb24c5065f9da4df9a93cb77de4292  ${DST}/.mounted" | md5sum -c - >/dev/null; then
		return 0
	else
		echo "Folder ${DST} incorrectly mounted (md5sum)" >&2
		return 1
	fi
}

mount_folder() {
	SRC="${1}"
	DST="${2}"

	header_begin "Mounting ${SRC} to ${DST}"
	MOUNTED+=("${DST}")

	[ -d "${SRC}" ] || jh_fatal "Encrypted source dir (${SRC}) not found"
	mkdir -p "${DST}" || true

	if ! check_mounted_folder "${DST}" 2>/dev/null; then
		echo "Encore un secret..."

		#################################################
		#
		# Alternatives
		#
		# !! To not mount both, add prefix
		#

		#
		# GoCryptFS
		#
		jh_info "Using gocryptfs"
		gocryptfs -allow_other "${SRC}" "${DST}"

		# #
		# # RClone CryptFS
		# #
		# jh_info "Using rclone cryptfs"

		# # -r: allow backslash
		# # -s: silent
		# echo -n "Enter password for rclone mount: "
		# read -r -s PWD
		# echo ""
		# echo "Mounting in background..."
		# (
		# 	#
		# 	# Thanks to https://forum.rclone.org/t/rclone-one-liner-to-connect-a-webdav-mount-without-rclone-conf/20444
		# 	#
		# 	#  @see connection-strings: https://rclone.org/docs/#connection-strings
		# 	#  @see log-level: https://rclone.org/docs/#log-level-level
		# 	#  @see vfs caching: https://rclone.org/commands/rclone_mount/#vfs-file-caching
		# 	#     !! caching is done outside of folder, so uncrypted data is available to all
		# 	#  @see other options: https://rclone.org/crypt/#standard-options
		# 	#
		# 	PWD_CRYTED="$(echo "$PWD" | rclone obscure -)"
		# 	rclone mount \
		# 		--log-level=ERROR \
		# 		--vfs-cache-mode=off \
		# 		":crypt,remote=${SRC},filename_encryption=standard,directory_name_encryption,password='$PWD_CRYTED',password2='$PWD_CRYTED'":/ \
		# 		"${DST}" \
		# 		2>&1 | jh-tag-stdin "rclone"
		# ) &

		#
		# Continue
		#
		#################################################
		ok "Continue"
		sleep 1s
		check_mounted_folder "${DST}" || jh_fatal "Mounting failure"

		jh_info "Clean up some files"
		rm -f "${DST}"/apps/firefox-profile/.parentlock
	fi

	# jh-cloud-prefetch "${SRC}"
	header_end
}

start() {
	mount_folder "${cryptedSource}" "${cryptedMounted}"

	do_move_to_be_encrypted_files

	ok "Started"
}

stop() {
	header_begin "Stopping..."

	for DST in "${MOUNTED[@]}"; do
		jh_info "Trying to unmount ${DST}"

		if mount | grep "${DST}" >/dev/null; then
			header_begin "Unmouning ${DST}"
			fusermount -u -z "${DST}/"
			if [ -d "${DST}" ]; then
				rmdir "${DST}"
			fi
			header_end
		else
			echo "Folder was already unmounted: ${DST}"
		fi
	done

	jh_info "List of mounted drives in home folder:"
	mount | grep "${HOME}"

	header_begin "Cleaning data"
	if [ -r ~/.local/share/Trash/metadata ]; then
		rm -fr ~/.local/share/Trash/
	fi
	rm -fr ~/.thumbnails/
	header_end

	header_end "Stopped !"
	exit 0
}

function do_move_to_be_encrypted_files() {
	if [ ! -d "${newlyEncrypted}" ]; then
		echo "newlyEncrypted not found: ${newlyEncrypted}" >&2
		return
	fi

	local LAST
	local LAST_NAME
	local I
	local F

	cd "${toBeEncrypted}"

	header_begin "Calculating index"
	LAST="$(find "${newlyEncrypted}" -regex '.*\/[0-9]*\..*' -print | sort | tail -n 1)"
	LAST_NAME="$(jh-fs name "${LAST}")"
	# Force base 10 even with leading 00
	((I = 10#${LAST_NAME} + 1))
	jh_value "Actual counter" "${I}"
	header_end

	for F in "${toBeEncrypted}"/*; do
		if [ ! -e "$F" ]; then
			break
		fi

		local EXT
		local MIME
		local FN

		header_begin "File ${F}"
		EXT="$(jh-fs extension "${F}")"
		MIME="$(mimetype -b "${F}")"
		jh_value "Mime" "${MIME}"

		case $MIME in
		image/*) ;;
		# video/* )
		# 	continue
		# 	;;
		*)
			mkdir -p "${newlyEncryptedOther}"
			mv "${F}" "${newlyEncryptedOther}/"
			header_end
			continue
			;;
		esac

		exiftool -overwrite_original "-UserComment<filename" "-TagsList+=_new" "${F}"
		FN="${newlyEncrypted}/$(printf %08d "${I}").${EXT}"
		mv -v "$F" "$FN"
		((++I))
		header_end
	done

	header_begin "Remaining in toBeEncrypted (${toBeEncrypted})"
	ls "${toBeEncrypted}"
	header_end
}

prefetch() {
	jh-cloud-prefetch "${cryptedSource}"
}

function treatAction() {
	case "$1" in
	"s" | "stop" | "q")
		jh_info "Quitting..."
		# stop? We use the 'trap EXIT'
		exit 0
		;;
	"i" | "import")
		jh_info "Moving files"
		start
		do_move_to_be_encrypted_files
		;;
	"f")
		# https://wiki.mozilla.org/Firefox/CommandLineOptions#-profile_%22profile_path%22
		firefox -no-remote -profile "${cryptedMounted}"/apps/firefox-profile/ &
		;;
	"p")
		jh_background_process prefetch
		;;
	# "d")
	# 	start
	# 	jh_info "Launching digikam"
	# 	# 	digikam --database-directory "${cryptedMounted}"/.metadata/ &
	# 	;;
	"n" | "nautilus")
		start
		jh_info "Launching nautilus"
		nautilus "${cryptedMounted}"/ &
		;;
	*)
		return 1
		;;
	esac
	return 0
}

jh_on_exit stop
start

# while echo -n "?" && read -r A; do
# 	echo "Action (stop/import/nautilus/prefetch/digikam): $A"
while true; do
	A=$(
		TERM=ansi whiptail --menu "Actions" 20 $COLUMNS 10 \
			"n" "Nautilus" \
			"f" "Firefox" \
			"p" "prefetch" \
			"i" "import" \
			"s" "stop" \
			3>&1 1>&2 2>&3
	)

	echo "Action: $A"
	if ! treatAction "$A"; then
		echo "Unknown action: $A"
	fi
	read -t 5 -p "Ok?" -r _pause
done
