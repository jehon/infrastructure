#!/usr/bin/env bash

#
# Configuration:
#
#    DEBUG (empty/content): Enable/disable debug
#
#
#

#
# Configs
#
#

jhTS="$(date "+%Y-%m-%d %H.%M.%S")"
export jhTS

# For Debug easy (https://wiki.bash-hackers.org/scripting/debuggingtips)
export PS4='\033[0;33m+${BASH_SOURCE[0]: -10}:${LINENO}:\033[0m ${FUNCNAME[0]:+${FUNCNAME[0]}(): }'

# ... koalty/
export JH_SRC

# ...koalty/packages
export prjRoot

# relative to initial($0) script
export jhSWD

export jhMsgOk
export jhMsgKo

# Other configs
jhValueIdent=10
export jhCloudFolderInUserHome=~/pCloudDrive

#
# jhSWD (Script Working Directory)
#   where the script currently execute
#
#   /usr/(s)bin
#
#  !! this depend on [1] <= the caller script
#
jhSWD="$(dirname "$(realpath --physical "$(realpath "$0")")")"

#
#
# Where is the package source file located
#
#  !! this depend on [0] <= the jh-lib script
#
prjRoot="$(dirname "$(dirname "$(dirname "$(dirname "$(dirname "$(realpath "${BASH_SOURCE[0]}")")")")")")"
# If SELF is as /usr/bin, then it is not under package source
if [ "$prjRoot" = "/" ]; then
    prjRoot=""
fi

if [ -z "$JH_DAEMON" ]; then
    if [[ $- == *i* ]] || [ -t 0 ]; then
        JH_DAEMON=""
    else
        JH_DAEMON="yes"
    fi
fi
if [ "$JH_DAEMON" == "no" ]; then
    JH_DAEMON=""
fi
export JH_DAEMON

jh_color() {
    COLOR=${1:-"0"}
    if [ -z "$JH_DAEMON" ]; then
        echo -en "\e[${COLOR}m"
    fi
}

JH_HEADER_MSGS=()

header_begin() {
    JH_HEADER_MSGS+=("$1")
    printf '*%.0s' $(seq ${#JH_HEADER_MSGS[@]})
    jh_color 93
    echo -n " ${JH_HEADER_MSGS[-1]}..."
    jh_color
    echo
}

header_end() {
    printf '*%.0s' $(seq ${#JH_HEADER_MSGS[@]})
    jh_color 93
    echo -n " ${JH_HEADER_MSGS[-1]} done"
    jh_color
    echo
    unset 'JH_HEADER_MSGS[${#arr[@]}-1]'
}

jh_debug() {
    if [ -z "$DEBUG" ]; then
        return
    fi

    jh_color 33
    echo -n "[DEBUG] $*"
    jh_color
    echo
}

jh_error() {
    (
        jh_color 41
        echo -n "[ERROR] $*"
        jh_color
        echo
    ) >&2
}

jh_fatal() {
    jh_error "$@"
    exit 1
}

jh_info() {
    jh_color 36
    echo "[INFOS] $*"
    jh_color
}

jh_value() {
    key="$1"
    value="$2"
    # Add : to key to put empty spaces after the :
    jh_color 36
    echo -n " ðŸ›ˆ"
    jh_color

    printf " %-${jhValueIdent}s " "${key}:"
    jh_color 36
    echo -n "${value}"
    jh_color
    echo
}

jh_value_file() {
    key="$1"
    file="$2"

    if [ -e "${file}" ]; then
        jh_value "$key" "${file} ${jhMsgOk}"
    else
        jh_value "$key" "${file} ${jhMsgKo}"
    fi
}

jhMsgOk="$(jh_color "01;32")âœ“$(jh_color)"
jhMsgKo="$(jh_color "01;31")âœ—$(jh_color)"

ok() {
    if [ -n "$1" ]; then
        echo "$jhMsgOk $*"
    else
        ok "Done"
    fi
}

ko() {
    echo -e "$jhMsgKo $*"
}

jh_on_exit() {
    # Thanks to https://stackoverflow.com/a/7287873/1954789
    # for SIG_NAME in "EXIT"; do
    local SIG_NAME="EXIT"
    trap -- "$(
        # helper fn to get existing trap command from output of trap -p
        trap -p 'EXIT' | cut -d ' ' -f 3 | tr -d "'"
        printf '%s\n' "$1"
    )" "$SIG_NAME"
    # done
}

jh_background_process() {
    if [ -n "$JH_BACKGROUND_LOG" ]; then
        "$@" >"$JH_BACKGROUND_LOG" 2>&1 &
    else
        "$@" &
    fi
    local PID="$!"
    if [ "$PID" = "0" ]; then
        jh_error "Failed to launch background process: $*"
        return 1
    fi
    jh_on_exit "kill '$PID'"

    # Return the result:
    echo "$PID"
}

jh_exclusive_take() {
    local lockFile="${1:?Need the lockfile as [1]}"
    local fd

    touch "$lockFile"

    #
    # check the actually running lock with
    #     sudo fuser $LOCK_FILE
    #

    # See https://www.baeldung.com/linux/bash-ensure-instance-running
    exec {fd}<"$lockFile"
    flock --exclusive --nonblock "$fd" || jh_fatal "Could not acquire lock $lockFile" >&2
}

jh_exclusive_kill() {
    local lockFile="${1:?Need the lockfile as [1]}"

    fuser --kill "$lockFile"
}
