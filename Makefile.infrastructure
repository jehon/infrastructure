#!/usr/bin/env make

#
#
# Depends on:
#     ansible/*
#
# Generate:
#     x
#

INFRASTRUCTURE_TMP=$(TMP)/infrastructure
ENCRYPTION_MOCK=infrastructure/.config/ansible-encryption-mock

export ANSIBLE_CONFIG=infrastructure/ansible.cfg

clean: infrastructure-clean
dump: infrastructure-dump
dump-runtimes: infrastructure-dump-runtimes
dependencies: infrastructure-dependencies
lint: infrastructure-lint
build: infrastructure-build
test: infrastructure-test
release: infrastructure-release

.PHONY: infrastructure-clean
infrastructure-clean:
	rm -f "$(PUBLISH)/dev-config.json"
	rm -fr "$(INFRASTRUCTURE_TMP)"
	docker ps | ( grep test-ansible || true ) | awk '{print $$1}' | xargs --no-run-if-empty -- docker kill
	docker image list --filter 'reference=test-ansible/*' --format '{{.Repository}}:{{.Tag}}' | xargs --no-run-if-empty -- docker image rm -f
	docker volume list --quiet | ( grep 'test-ansible' || true ) | xargs --no-run-if-empty -- docker rm -f

.PHONY: infrastructure-dump
infrastructure-dump:
	$(call dump_space)
	$(call dump_title,INFRASTRUCTURE)
	$(call dump_info,INFRASTRUCTURE_TMP)
	$(call dump_info, ENCRYPTION_MOCK)
	$(call dump_info, PUBLISH)

.PHONY: infrastructure-dependencies
infrastructure-dependencies: $(PYTHON_DEPENDENCY_COMMON_MARK) \
	$(INFRASTRUCTURE_TMP)/.galaxy \
	$(INFRASTRUCTURE_TMP)/encryption-key \
	$(INFRASTRUCTURE_TMP)/ssh-key

$(INFRASTRUCTURE_TMP)/.galaxy: infrastructure/.config/ansible-galaxy.yml \
		$(PYTHON_DEPENDENCY_COMMON_MARK)

# https://docs.ansible.com/ansible/latest/cli/ansible-galaxy.html#collection-install
	$(call mkdir,$@)

	$(PYTHON_TMP)/common/bin/ansible-galaxy collection install \
		--upgrade \
		--collections-path tmp/infrastructure/collections \
		--requirements-file "$<"

	$(PYTHON_TMP)/common/bin/ansible-galaxy role install \
		--roles-path tmp/infrastructure/roles \
		--role-file "$<"

	cp "$<" "$@"

$(INFRASTRUCTURE_TMP)/encryption-key:
	$(call mkdir,$@)
	rm -f "$@"
	if [ -r ~/restricted/ansible-encryption-key ]; then \
		ln -fs ~/restricted/ansible-encryption-key "$(INFRASTRUCTURE_TMP)/encryption-key"; \
	else \
		cp -f infrastructure/.config/ansible-encryption-mock "$(INFRASTRUCTURE_TMP)/encryption-key"; \
	fi

$(INFRASTRUCTURE_TMP)/ssh-key:
	$(call mkdir,$@)
	rm -f "$@"
	if [ -r $(HOME)/.ssh/id_rsa ]; then \
		ln -fs $(HOME)/.ssh/id_rsa "$@"; \
	fi

.PHONY: infrastructure-dump-runtimes
infrastructure-dump-runtimes: dependencies
	@type ansible | grep "$(ROOT)/"
	@ansible --version

	@type ansible-lint | grep "$(ROOT)/"
	@ansible-lint --version

	@type ansible-playbook | grep "$(ROOT)/"
	@ansible-playbook --version

.PHONY: infrastructure-lint
infrastructure-lint: dependencies
	cd infrastructure/ && ansible-lint
	@echo "$@ ok"

.PHONY: infrastructure-build
infrastructure-build: dependencies \
	$(PUBLISH)/dev-config.json

$(PUBLISH)/dev-config.json: $(INFRASTRUCTURE_TMP)/test.built
	$(call mkdir,$@)
	cd infrastructure/ && ansible-playbook \
		--vault-password-file $(ROOT)/$(ENCRYPTION_MOCK) \
		build-artifacts.yml
	$(call touch,$@)

.PHONY: infrastructure-test
infrastructure-test: $(INFRASTRUCTURE_TMP)/test.built

	run-parts --exit-on-error --verbose --regex "^[0-9][0-9]-.*" ./tests/infrastructure

# For github actions, we need a ssh key
$(HOME)/.ssh/id_rsa.pub:
	ssh-keygen -t rsa -q -f "$(HOME)/.ssh/id_rsa" -N ""

$(INFRASTRUCTURE_TMP)/test.built: \
		$(PYTHON_DEPENDENCY_COMMON_MARK) \
		$(PACKAGES_REPO_MARK) \
		$(INFRASTRUCTURE_TMP)/50-hosts.yml \
		$(HOME)/.ssh/id_rsa.pub \
		setup.sh

	$(call touch,$@)

$(INFRASTRUCTURE_TMP)/50-hosts.yml: infrastructure/inventory/50-hosts.yml \
		bin/ansible-no-secrets

	$(call mkdir,$@)
	bin/ansible-no-secrets "infrastructure/inventory/50-hosts.yml" "$@"
	$(call touch,$@)

.PHONY: infrastructure-release
infrastructure-release: $(PUBLISH)/dev-config.json
