#!/usr/bin/python3

import argparse
import os
import subprocess

import jehon.display as jdi
import jehon.shell as jshell

####################################
#
# Variables
#
ansibleArgs=[]
prjRoot=os.path.dirname(os.path.dirname(__file__))

####################################
#
# Arguments parsing
#
parser = argparse.ArgumentParser(description='Proxy to ansible commands')
parser.set_defaults(
    action="setup",
)
parser.add_argument('--host', help='target host', required=True)
parser.add_argument('action', help='Target action', choices=[ "init", "setup" ])
parser.add_argument('playbooks',  nargs='*', help='Override playbook', default=[ "infos.yml", "upgrade.yml", "setup.yml" ])

parser.add_argument('--ip', help='Target IP host')
parser.add_argument('-u', '--ssh-user', help='Override SSH username')
parser.add_argument('-p', '--ssh-password', help='Override SSH password')

args=parser.parse_args()
# print(args)
# exit(1)

def run_ansible(title: str, playbooks: list[str], ansibleArgs: list[str]):
    with jdi.header(title):
        jshell.run(
                [ os.path.join(prjRoot, ".python/bin/ansible-playbook") ] + ansibleArgs + playbooks,
                cwd=os.path.join(prjRoot),
                env={ "PYTHONPATH": os.path.join(prjRoot, ".python") }
            )


####################################
#
# Set the host
#
jdi.info("Selected host: " + args.host)
ansibleArgs.append("--limit")
ansibleArgs.append(args.host)

#
# Host specific config
#
match args.host:
    case "dev":
        ansibleArgs.append("--ask-become-pass")

####################################
#
# SSH Connection credentials
#
# https://manpages.debian.org/bullseye/ansible/ansible-playbook.1.en.html
# https://docs.ansible.com/ansible/2.9/plugins/connection/ssh.html
#
if args.ssh_user:
    ansibleArgs.append("-e")
    ansibleArgs.append("ansible_user=" + args.ssh_user)
    if args.ssh_user != "root":
        ansibleArgs.append("-e")
        ansibleArgs.append("ansible_become=true")

if args.ssh_password:
    ansibleArgs.append("-e")
    ansibleArgs.append("ansible_password=" + args.ssh_password)

    if args.ssh_user != "root":
        ansibleArgs.append("-e")
        ansibleArgs.append("ansible_sudo_pass=" + args.ssh_password)

if args.ip:
    ansibleArgs.append("-e")
    ansibleArgs.append("ansible_host=" + args.ip)
    with jdi.header("reset ip"):
        subprocess.run([ "/usr/bin/jh-ssh-update-key", args.ip ], check=True)

    with jdi.header("reset host"):
        subprocess.run([ "/usr/bin/jh-ssh-update-key", args.host ], check=False)

####################################
#
# Go action
#
match args.action:
    case "setup":
        True
    case "init" | "bootstrap ":
        print("************")
        print("************ base image *****************")
        print("************")
        print("************ Debian 64 bits Lite")
        print("************")

        run_ansible('run', [ "infos.yml", "bootstrap.yml" ], ansibleArgs)

        with jdi.header("ssh"):
            jshell.run([ "ssh", args.ip, "-l", args.ssh_user, "sudo ./bootstrap.sh" ])

        exit(0)

# jh.shell([ "bin/jh-ansible-setup" ], cwd=prjRoot)

jdi.info("Selected playbooks: " + " ".join(args.playbooks))

run_ansible('run', args.playbooks, ansibleArgs)
