#!/usr/bin/env bash

set -o errexit
set -o pipefail
shopt -s nullglob

_SD="$(dirname "$(realpath "${BASH_SOURCE[0]}")")"

# shellcheck source-path=SCRIPTDIR
. "${_SD}"/lib.sh

moveWindowTo() {
    # Thanks to https://askubuntu.com/a/702302/638656

    window="${1:?Need window to move}"
    desktop="${2:?Need the desktop}"
    position="${3:?Need target position}" # x,y,w,h (gravity is hardcoded)
    shift
    shift
    # Options for [...]:
    #    - maximized_vert
    #    - maximized_horz

    winId=$(
        wmctrl -l |
            grep -E -- "${window}" |
            cut -d" " -f1 || true
    )

    if [ -z "${winId}" ]; then
        echo "Window not found: ${window}"
        return
    fi
    echo "Window: ${winId}: move to ${position}"

    wmctrl -ir "$winId" -b remove,maximized_vert
    wmctrl -ir "$winId" -b remove,maximized_horz
    wmctrl -ir "$winId" -e "0,${position}" -t "${desktop}"
    while [ -n "$1" ]; do
        wmctrl -ir "$winId" -b add,"$1"
        shift
    done
}

S_SEC_LEFT=0
S_SEC_TOP=0
S_SEC_WIDTH=1920
S_SEC_HEIGHT=0
S_PRIM_LEFT=$((S_SEC_LEFT + S_SEC_WIDTH))
S_PRIM_TOP=0
S_PRIM_WIDTH=3440
S_PRIM_HEIGHT=1440

case "$1" in
"")
    # Secondary screen
    moveWindowTo 'Spotify' 1 "$((S_SEC_LEFT)),$((S_SEC_TOP)),$((S_SEC_WIDTH)),$((S_SEC_HEIGHT))" maximized_vert maximized_horz
    # Front screen D1

    # Front screen D2
    moveWindowTo '.* - infrastructure$' 1 "$((S_PRIM_LEFT)),$((S_PRIM_TOP)),$((S_PRIM_WIDTH / 2)),$((S_PRIM_HEIGHT))" maximized_vert
    # Front screen D3
    moveWindowTo '.* - cryptomedic$' 2 "$((S_PRIM_LEFT)),$((S_PRIM_TOP)),$((S_PRIM_WIDTH / 2)),$((S_PRIM_HEIGHT))" maximized_vert
    ;;
"ls-windows")
    wmctrl -l
    exit 0
    ;;
"ls-screens")
    xrandr | grep " connected"
    exit 0
    ;;
*)
    jh_fatal "Unknown verb: $1"
    ;;
esac
