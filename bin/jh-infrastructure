#!/usr/bin/python3

import argparse
import datetime
import os
import subprocess
import sys

import jehon.display as jdi
import jehon.shell as jshell

jdi.info("Startup time: "+ str(datetime.datetime.now()))

####################################
#
# Variables
#
ansibleArgs=[]
prjRoot=os.path.dirname(os.path.dirname(__file__))

####################################
#
# Arguments parsing
#
parser = argparse.ArgumentParser(description='Proxy to ansible commands')
parser = argparse.ArgumentParser(formatter_class=lambda prog: argparse.HelpFormatter(prog,max_help_position=80))
parser.set_defaults(
    action="setup",
)
parser.add_argument('action', help='Target action', choices=[ "dump", "setup", "upgrade" ], default="setup")
parser.add_argument('host', help='target host', nargs='?', default=None)
parser.add_argument('--playbooks',  nargs='*', help='Override playbook', default=[ "infos.yml", "setup.yml" ])

parser.add_argument('--ip', help='Target IP host')
parser.add_argument('--local', help='Use local sudo', action=argparse.BooleanOptionalAction)
parser.add_argument('-u', '--ssh-user', help='Override SSH username')
parser.add_argument('-p', '--ssh-password', help='Override SSH password')

args=parser.parse_args()
# print(args)
# exit(1)

def run_ansible(title: str, playbooks: list[str], ansibleArgs: list[str]):
    with jdi.header(title):
        res = jshell.run(
                [ os.path.join(prjRoot, ".python/bin/ansible-playbook") ] + ansibleArgs + playbooks,
                cwd=os.path.join(prjRoot),
                env={ "PYTHONPATH": os.path.join(prjRoot, ".python") }
            )
        if res > 0:
            sys.exit(res)

# jh.shell([ "bin/jh-ansible-setup" ], cwd=prjRoot)

####################################
#
# Set the host
#
jdi.info(f"Selected host: {args.host}")
if args.host:
    ansibleArgs.append("--limit")
    ansibleArgs.append(args.host)

    # #
    # # Host specific config
    # #
    # match args.host:
    #     case "dev" | "":
    #         ansibleArgs.append("--ask-become-pass")

if args.local:
    ansibleArgs.append("--connection local")
    ansibleArgs.append("--ask-become-pass")

####################################
#
# SSH Connection credentials
#
# https://manpages.debian.org/bullseye/ansible/ansible-playbook.1.en.html
# https://docs.ansible.com/ansible/2.9/plugins/connection/ssh.html
#
if args.ssh_user:
    if not args.host:
        parser.error("ssh credentials set, but not the host", file=sys.stderr)
    
    ansibleArgs.append("-e")
    ansibleArgs.append("ansible_user=" + args.ssh_user)
    jdi.info("Using user" + args.ssh_user)
    if args.ssh_user != "root":
        ansibleArgs.append("-e")
        ansibleArgs.append("ansible_become=true")
        jdi.info("With become root")

if args.ssh_password:
    if not args.host:
        parser.error("ssh credentials set, but not the host", file=sys.stderr)
    
    ansibleArgs.append("-e")
    ansibleArgs.append("ansible_password=" + args.ssh_password)
    jdi.info("With password " + str(len(args.ssh_user)) + " characters")

    if args.ssh_user != "root":
        ansibleArgs.append("-e")
        ansibleArgs.append("ansible_sudo_pass=" + args.ssh_password)
        jdi.info("With root password from user")

if args.ip:
    if not args.host:
        parser.error("ssh credentials set, but not the host", file=sys.stderr)
    
    ansibleArgs.append("-e")
    ansibleArgs.append("ansible_host=" + args.ip)
    jdi.info("Using ip: " + args.ip)

    with jdi.header("reset ip"):
        subprocess.run([ "/usr/bin/jh-ssh-update-key", args.ip ], check=True)

    with jdi.header("reset host"):
        subprocess.run([ "/usr/bin/jh-ssh-update-key", args.host], check=False)

####################################
#
# Go action
#
match args.action:
    case "dump":
        run_ansible('run', [ "dump.yml" ], ansibleArgs)

    case "setup":
        jdi.info("Selected playbooks: " + " ".join(args.playbooks))
        run_ansible('run', args.playbooks, ansibleArgs)
        if args.ip:
            # when ip is set, host must be set - see above
            jdi.info("Ansible done to target ip. Rebooting now.")
            jshell.ssh(
                    host=args.host,
                    cmd=[ "/usr/sbin/reboot" ],
                    title="reboot"
                )

    case "upgrade":
        playbooks = [ "upgrade.yml", "setup.yml" ]
        jdi.info("Selected playbooks: " + " ".join(playbooks))
        # Args? host only
        run_ansible('run', playbooks, ansibleArgs)

    #     match args.host:
    #         case "dev":
    #             jshell.run("sudo /usr/sbin/jh-system-upgrade full")
    #         case _:
    #             jshell.ssh(
    #                     host=args.host,
    #                     cmd=[ "/usr/sbin/jh-system-upgrade", "full" ],
    #                     title="upgrade"
    #                 )
    case _:
        parser.error(f"Unknown action: {args.action}", file=sys.stderr)

jdi.info("End time: "+ str(datetime.datetime.now()))
